import streamlit as st
import os
from dotenv import load_dotenv
import text_processor
from text_processor import process_text_with_chatgpt, split_text_by_tokens, process_chunk

load_dotenv()

st.set_page_config(
    page_title="Russian Text Enhancer",
    page_icon="üìù",
    layout="wide"
)

st.title("Russian Text Enhancer")
st.markdown("""
–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–ª—É—á—à–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –¥–ª–∏–Ω–Ω—ã—Ö —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é GPT-4.
–¢–µ–∫—Å—Ç —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é —Å —É—á—ë—Ç–æ–º —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–∏, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –æ–±—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
""")

with st.expander("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
    max_tokens = st.slider(
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç",
        min_value=1000,
        max_value=5000,
        value=3000,
        step=500,
        help="–ë–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ - –º–µ–Ω—å—à–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤, –Ω–æ –¥–æ–ª—å—à–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞"
    )
    
    create_summary = st.checkbox(
        "–°–æ–∑–¥–∞—Ç—å –æ–±—â–µ–µ —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
        value=True,
        help="–°–æ–∑–¥–∞—ë—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏"
    )

api_key = os.environ.get("OPENAI_KEY") or os.environ.get("OPENAI_API_KEY", "")
if not api_key:
    st.warning("OpenAI API key –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ OPENAI_KEY –≤ .env –∏–ª–∏ Secrets.")
    st.stop()

# Replace file upload with text area
user_text = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:", height=300, placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")

if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç"):
    if user_text:
        try:
            st.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

            # Prepare the progress display components
            progress_bar = st.progress(0)
            status_text = st.empty()

            # –û–±–Ω–æ–≤–ª—è–µ–º max_tokens –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            text_processor.MAX_TOKENS_PER_CHUNK = max_tokens
            
            # Process the text with visual progress tracking
            if create_summary and len(user_text) > 5000:
                with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–∞..."):
                    context_summary = text_processor.extract_summary(user_text)
                    st.info(f"–°–æ–∑–¥–∞–Ω–æ —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ({len(context_summary.split())} —Å–ª–æ–≤)")
            
            chunks = text_processor.split_text_by_tokens(user_text, max_tokens)
            total_chunks = len(chunks)
            
            if total_chunks > 10:
                st.warning(f"–¢–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ {total_chunks} —á–∞—Å—Ç–µ–π. –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
            
            results = []
            
            for i, chunk in enumerate(chunks):
                # Update progress indicators
                progress_percent = i / total_chunks
                progress_bar.progress(progress_percent)
                status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i+1} –∏–∑ {total_chunks} —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞ ({int(progress_percent*100)}%)")

                # Process the current chunk with context
                with st.spinner(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ {i+1}/{total_chunks}..."):
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —á–∞—Å—Ç–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–µ—Å—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ
                    position_prefix = f"[–ß–∞—Å—Ç—å {i+1} –∏–∑ {total_chunks}]\n\n"
                    
                    if create_summary and 'context_summary' in locals() and len(chunks) > 1:
                        context_msg = f"""
–≠—Ç–æ —á–∞—Å—Ç—å –±–æ–ª—å—à–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ {total_chunks} —á–∞—Å—Ç–µ–π. 

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç:
"""
                        chunk_with_context = position_prefix + context_msg + chunk
                        result = text_processor.process_chunk(chunk_with_context)
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑—é–º–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
                        chunk_with_position = position_prefix + chunk
                        result = text_processor.process_chunk(chunk_with_position)
                    
                    # –£–¥–∞–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    result = result.replace(position_prefix, "")
                    results.append(result)

            # Complete the progress bar
            progress_bar.progress(1.0)
            status_text.text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
            # Display token information summary
            total_input_tokens = text_processor.count_tokens(user_text)
            st.info(f"–†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {total_input_tokens} —Ç–æ–∫–µ–Ω–æ–≤, —Ä–∞–∑–±–∏—Ç –Ω–∞ {total_chunks} —á–∞—Å—Ç–µ–π.")

            # Join all processed chunks
            output = "\n\n".join(results)

            st.success("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            st.download_button("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", output, file_name="processed_text.txt", mime="text/plain")
            st.text_area("–†–µ–∑—É–ª—å—Ç–∞—Ç:", output, height=500)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")